generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  name       String
  apartment  String
  googleId   String?   @unique
  role       UserRole  @default(USER)
  buildingId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  dishes     Dish[]
  orders     Order[]
  bookings   Booking[]
  messages   Message[]
  notifications Notification[]
  building   Building  @relation(fields: [buildingId], references: [id])

  @@unique([buildingId, apartment])
  @@map("users")
}

model Building {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("buildings")
}

model Dish {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  ingredients String[]
  images      String[]
  available   Boolean   @default(true)
  portions    Int       @default(1)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@map("dishes")
}

model Booking {
  id         String   @id @default(uuid())
  dishId     String
  userId     String
  pickupTime DateTime
  portions   Int      @default(1)
  status     String   @default("pending")
  total      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dish       Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Order {
  id        String   @id @default(uuid())
  dishId    String
  userId    String
  status    String   @default("pending")
  quantity  Int      @default(1)
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dish      Dish     @relation(fields: [dishId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  type      String   // "BOOKING_CREATED", "BOOKING_CANCELLED", etc.
  message   String
  isRead    Boolean  @default(false)
  userId    String   // L'utilisateur qui re√ßoit la notification
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
}
