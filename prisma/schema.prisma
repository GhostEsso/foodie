generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          String    @default("USER")
  googleId      String?   @unique
  apartment     String?
  buildingId    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isBlocked     Boolean   @default(false)
  dishes        Dish[]
  bookings      Booking[]
  notifications Notification[]
  conversations Conversation[] @relation("UserConversations")
  sentMessages     Message[]   @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  emailVerified Boolean   @default(false)
  verificationCode String? @unique
  verificationCodeExpires DateTime?
  building    Building? @relation(fields: [buildingId], references: [id])
  orders      Order[]
  likes       Like[]

  @@unique([buildingId, apartment])
  @@map("users")
}

model Building {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("buildings")
}

model Dish {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  ingredients String[]
  images      String[]
  available   Boolean   @default(true)
  portions    Int       @default(1)
  likesCount  Int       @default(0)
  availableFrom DateTime?
  availableTo   DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  likes       Like[]
  conversations Conversation[]

  @@map("dishes")
}

model Booking {
  id         String   @id @default(uuid())
  dishId     String
  userId     String
  pickupTime DateTime
  portions   Int      @default(1)
  status     BookingStatus @default(PENDING)
  total      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  dish       Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Order {
  id        String   @id @default(uuid())
  dishId    String
  userId    String
  status    String   @default("pending")
  quantity  Int      @default(1)
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dish      Dish     @relation(fields: [dishId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Message {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  receiverId     String
  conversationId String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  dishId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dish      Dish     @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@unique([userId, dishId])
  @@map("likes")
}

model Conversation {
  id        String    @id @default(uuid())
  dishId    String
  dish      Dish      @relation(fields: [dishId], references: [id])
  users     User[]    @relation("UserConversations")
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("conversations")
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
